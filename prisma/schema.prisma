generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model employee {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name             String                   @db.VarChar(255)
  last_name              String                   @db.VarChar(255)
  user_id                String?                  @db.Uuid
  organization_id        String?                  @db.Uuid
  created_at             DateTime                 @default(now()) @db.Timestamp(6)
  updated_at             DateTime                 @default(now()) @db.Timestamp(6)
  organization           organization?            @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                   user?                    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  performance_evaluation performance_evaluation[]
  time_tracking          time_tracking[]
}

model organization {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?    @db.VarChar(255)
  image       String?    @db.VarChar(255)
  name        String     @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  user_id     String     @db.Uuid
  tenant_id   String     @db.VarChar(255)
  employee    employee[]
  user        user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model performance_evaluation {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  evaluation_date DateTime  @db.Timestamp(6)
  score           Int
  employee_id     String?   @db.Uuid
  created_at      DateTime  @default(now()) @db.Timestamp(6)
  updated_at      DateTime  @default(now()) @db.Timestamp(6)
  employee        employee? @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model time_tracking {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  start_time  DateTime  @db.Timestamp(6)
  end_time    DateTime  @db.Timestamp(6)
  employee_id String?   @db.Uuid
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  employee    employee? @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  employee     employee[]
  organization organization[]
}
